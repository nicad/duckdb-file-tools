name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}

    - name: Show environment info
      run: |
        rustc --version
        cargo --version
        python3 --version
        echo "OS: ${{ runner.os }}"
        echo "Target: ${{ matrix.target || 'default' }}"

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config

    - name: Configure extension
      run: make configure

    - name: Build debug
      run: make debug

    - name: Run tests (debug)
      run: make test_debug

    - name: Build release
      run: make release

    - name: Run tests (release)
      run: make test_release

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings -A clippy::type_complexity -A clippy::too_many_arguments -A clippy::needless_range_loop -A clippy::option_as_ref_deref -A clippy::manual_ok_err -A clippy::len_zero -A clippy::unnecessary_cast -A clippy::missing_safety_doc -A clippy::redundant_closure -A clippy::module_name_repetitions -A clippy::similar_names -A clippy::single_match_else -A clippy::unreadable_literal -A clippy::cast_lossless -A clippy::cast_possible_truncation -A clippy::cast_sign_loss -A clippy::cast_possible_wrap -A clippy::match_wildcard_for_single_variants -A clippy::doc_markdown -A clippy::must_use_candidate -A clippy::return_self_not_must_use -A clippy::uninlined_format_args -A clippy::ignored_unit_patterns -A clippy::map_unwrap_or -A clippy::redundant_closure_for_method_calls -A clippy::too_many_lines -A clippy::manual_let_else -A clippy::implicit_clone -A clippy::unnecessary_wraps -A clippy::single_char_pattern

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  build-artifacts:
    name: Build Artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: so
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: dll
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: dylib
          - os: macos-latest
            target: aarch64-apple-darwin
            ext: dylib

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config

    - name: Configure extension
      run: make configure

    - name: Build release
      run: make release

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: file-tools-${{ matrix.target }}
        path: build/release/file_tools.duckdb_extension
        retention-days: 7

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Build documentation
      run: cargo doc --no-deps --all-features

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: target/doc/
        retention-days: 7